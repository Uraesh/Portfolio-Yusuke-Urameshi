/**
 * ===========================================
 * 1. CURSEUR PERSONNALIS√â AVEC EFFET DE TRA√éN√âE
 * ===========================================
 * Cr√©e un curseur personnalis√© avec un effet de tra√Æn√©e
 */

// S√©lectionne l'√©l√©ment du curseur personnalis√©
const cursor = document.querySelector('.cursor');
// Tableau pour stocker les √©l√©ments de tra√Æn√©e du curseur
const cursorTrails = [];

// Cr√©e 5 √©l√©ments de tra√Æn√©e pour le curseur
for (let i = 0; i < 5; i++) {
    const trail = document.createElement('div');
    trail.className = 'cursor-trail';  // Classe CSS pour le style des tra√Æn√©es
    document.body.appendChild(trail);   // Ajoute la tra√Æn√©e au document
    cursorTrails.push(trail);          // Stocke la r√©f√©rence dans le tableau
}

// Variables pour suivre la position de la souris
let mouseX = 0, mouseY = 0;

// Met √† jour la position du curseur en fonction du mouvement de la souris
document.addEventListener('mousemove', (e) => {
    // Enregistre les coordonn√©es actuelles de la souris
    mouseX = e.clientX;
    mouseY = e.clientY;
    
    // D√©place le curseur principal vers la position de la souris
    cursor.style.left = mouseX + 'px';
    cursor.style.top = mouseY + 'px';
});

/**
 * Anime les tra√Æn√©es du curseur avec un l√©ger d√©calage
 * pour cr√©er un effet de tra√Æn√©e fluide
 */
setInterval(() => {
    cursorTrails.forEach((trail, index) => {
        // Chaque tra√Æn√©e suit avec un l√©ger d√©lai pour cr√©er l'effet de tra√Æn√©e
        setTimeout(() => {
            trail.style.left = mouseX + 'px';
            trail.style.top = mouseY + 'px';
        }, index * 50);  // D√©lai progressif pour chaque tra√Æn√©e
    });
}, 50);  // Rafra√Æchit la position toutes les 50ms

/**
 * ===========================================
 * 2. √âCRAN DE CHARGEMENT
 * ===========================================
 * Affiche un √©cran de chargement au d√©marrage de la page
 * puis effectue une transition en fondu pour le masquer
 */
window.addEventListener('load', () => {
    // Attend 3 secondes avant de commencer la disparition
    setTimeout(() => {
        // Fait dispara√Ætre progressivement l'√©cran de chargement
        document.getElementById('loader').style.opacity = '0';
        
        // Apr√®s la fin de l'animation de fondu, masque compl√®tement l'√©l√©ment
        setTimeout(() => {
            document.getElementById('loader').style.display = 'none';
        }, 500);  // D√©lai correspondant √† la dur√©e de la transition CSS
    }, 3000);  // D√©lai avant le d√©but de la disparition
});

/**
 * ===========================================
 * 3. PARTICULES FLOTTANTES
 * ===========================================
 * Cr√©e des particules anim√©es en arri√®re-plan
 * pour un effet visuel dynamique
 */
function createParticles() {
    // R√©cup√®re le conteneur des particules
    const particlesContainer = document.getElementById('particles');
    
    // Cr√©e 50 particules avec des propri√©t√©s al√©atoires
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';  // Classe CSS pour le style des particules
        
        // Position al√©atoire horizontale (0% √† 100%)
        particle.style.left = Math.random() * 100 + '%';
        
        // D√©lai d'animation al√©atoire pour varier le d√©marrage
        particle.style.animationDelay = Math.random() * 15 + 's';
        
        // Dur√©e d'animation al√©atoire entre 10 et 20 secondes
        particle.style.animationDuration = (Math.random() * 10 + 10) + 's';
        
        // Ajoute la particule au conteneur
        particlesContainer.appendChild(particle);
    }
}

// Appelle la fonction pour cr√©er les particules au chargement de la page
createParticles();

/**
 * ===========================================
 * 4. ANIMATION DE FRAPPE TERMINAL
 * ===========================================
 * Simule une frappe au clavier pour le texte du terminal
 */

// Texte √† afficher avec l'effet de frappe
const terminalText = "D√©veloppeur passionn√© par l'IA ‚Ä¢ Vibe Coder ‚Ä¢ Toujours pr√™t √† apprendre avec les machines ! üöÄ";
// √âl√©ment HTML o√π le texte sera affich√©
const typingElement = document.getElementById('typing-text');
// Compteur pour suivre la position dans le texte
let i = 0;

/**
 * Fonction r√©cursive pour l'effet de frappe
 * Ajoute un caract√®re √† la fois avec un l√©ger d√©lai
 */
function typeWriter() {
    // V√©rifie si on n'a pas atteint la fin du texte
    if (i < terminalText.length) {
        // Ajoute le caract√®re suivant
        typingElement.textContent += terminalText.charAt(i);
        i++;
        // Appelle r√©cursivement la fonction avec un d√©lai
        setTimeout(typeWriter, 100);  // 100ms entre chaque caract√®re
    }
}

// D√©marre l'animation apr√®s un d√©lai de 2 secondes
setTimeout(typeWriter, 2000);

/**
 * ===========================================
 * 5. ANIMATIONS DE R√âV√âLATION AU SCROLL
 * ===========================================
 * Fait appara√Ætre les √©l√©ments lorsqu'ils entrent dans la vue
 * avec une animation fluide
 */

// Options pour l'Intersection Observer
const observerOptions = {
    threshold: 0.1,  // D√©clenche lorsque 10% de l'√©l√©ment est visible
    rootMargin: '0px 0px -50px 0px'  // D√©cale la zone de d√©clenchement vers le haut de 50px
};

// Cr√©e un nouvel Intersection Observer
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        // V√©rifie si l'√©l√©ment est dans la vue
        if (entry.isIntersecting) {
            // Ajoute la classe 'active' pour d√©clencher l'animation
            entry.target.classList.add('active');
            
            // Traitement sp√©cial pour la section des comp√©tences
            if (entry.target.id === 'competences') {
                // R√©cup√®re toutes les barres de comp√©tences
                const skillBars = entry.target.querySelectorAll('.skill-progress');
                
                // Anime chaque barre de comp√©tence
                skillBars.forEach(bar => {
                    // R√©cup√®re la largeur cible depuis l'attribut data-width
                    const width = bar.getAttribute('data-width');
                    
                    // Anime la largeur de la barre apr√®s un court d√©lai
                    setTimeout(() => {
                        bar.style.width = width + '%';
                    }, 500);  // D√©lai pour un effet d'animation en cascade
                });
            }
        }
    });
}, observerOptions);

// Observe tous les √©l√©ments avec la classe 'reveal'
document.querySelectorAll('.reveal').forEach(el => {
    observer.observe(el);
});

/**
 * ===========================================
 * 6. NAVIGATION FLUIDE
 * ===========================================
 * Permet un d√©filement fluide vers les sections
 * lors du clic sur les liens de navigation
 */
document.querySelectorAll('nav a').forEach(anchor => {
    // Ajoute un √©couteur d'√©v√©nement √† chaque lien de navigation
    anchor.addEventListener('click', function (e) {
        e.preventDefault();  // Emp√™che le comportement par d√©faut du lien
        
        // R√©cup√®re la cible du lien (l'ID de la section)
        const targetId = this.getAttribute('href');
        const target = document.querySelector(targetId);
        
        if (target) {
            // Fait d√©filer jusqu'√† la section cible de mani√®re fluide
            target.scrollIntoView({
                behavior: 'smooth',  // Animation de d√©filement fluide
                block: 'start'        // Aligne le haut de l'√©l√©ment avec le haut de la zone visible
            });
        }
    });
});

/**
 * ===========================================
 * 7. EFFET 3D AU SURVOL DES CARTES DE PROJET
 * ===========================================
 * Cr√©e un effet 3D qui fait pivoter les cartes
 * en fonction de la position de la souris
 */
document.querySelectorAll('.project-card').forEach(card => {
    // √âv√©nement d√©clench√© lorsque la souris se d√©place sur une carte
    card.addEventListener('mousemove', (e) => {
        // Calcule la position de la souris par rapport √† la carte
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;  // Position X relative √† la carte
        const y = e.clientY - rect.top;   // Position Y relative √† la carte
        
        // Calcule le centre de la carte
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        // Calcule les angles de rotation en fonction de la position de la souris
        // Divis√© par 10 pour r√©duire l'intensit√© de la rotation
        const rotateX = (y - centerY) / 10;  // Rotation autour de l'axe X
        const rotateY = (centerX - x) / 10;  // Rotation autour de l'axe Y
        
        // Applique la transformation 3D
        card.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(20px)`;
    });
    
    // R√©initialise la transformation lorsque la souris quitte la carte
    card.addEventListener('mouseleave', () => {
        card.style.transform = 'rotateX(0) rotateY(0) translateZ(0)';
    });
});

/**
 * ===========================================
 * 8. EFFET DE PARALLAXE
 * ===========================================
 * Cr√©e un effet de d√©filement √† diff√©rentes vitesses
 * pour les √©l√©ments en arri√®re-plan
 */
window.addEventListener('scroll', () => {
    // R√©cup√®re la position de d√©filement verticale
    const scrolled = window.pageYOffset;
    // S√©lectionne l'√©l√©ment avec l'effet de parallaxe
    const parallax = document.querySelector('.parallax');
    
    if (parallax) {
        // Calcule le d√©calage en fonction du d√©filement
        // (multipli√© par 0.5 pour r√©duire l'intensit√©)
        const speed = scrolled * 0.5;
        // Applique la transformation de translation
        parallax.style.transform = `translateY(${speed}px)`;
    }
});

/**
 * ===========================================
 * 9. EASTER EGG - KONAMI CODE
 * ===========================================
 * Cache une fonctionnalit√© secr√®te activable
 * avec la c√©l√®bre combinaison Konami
 */
// S√©quence du code Konami : Haut, Haut, Bas, Bas, Gauche, Droite, Gauche, Droite, B, A
const konamiCode = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65];
let konamiIndex = 0;  // Suivi de la position dans la s√©quence

// √âcoute les √©v√©nements de touche du clavier
document.addEventListener('keydown', (e) => {
    // V√©rifie si la touche press√©e correspond √† la s√©quence attendue
    if (e.keyCode === konamiCode[konamiIndex]) {
        konamiIndex++;  // Passe √† la touche suivante de la s√©quence
        
        // V√©rifie si toute la s√©quence a √©t√© entr√©e correctement
        if (konamiIndex === konamiCode.length) {
            // Active l'easter egg
            document.body.style.animation = 'rainbow 0.5s infinite';  // Animation arc-en-ciel
            
            // D√©sactive l'animation apr√®s 2 secondes
            setTimeout(() => {
                document.body.style.animation = '';  // Supprime l'animation
                // Affiche un message de f√©licitations
                alert('üéâ Easter egg trouv√© ! Tu es un vrai vibe coder ! ü§ñ');
            }, 2000);
            
            konamiIndex = 0;  // R√©initialise pour une utilisation ult√©rieure
        }
    } else {
        // R√©initialise la s√©quence si la touche est incorrecte
        konamiIndex = 0;
    }
});